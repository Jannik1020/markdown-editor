{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialText","marked","setOptions","breaks","renderer","Renderer","link","href","title","text","Provider","ReactRedux","connect","store","Redux","state","action","type","Presentational","id","this","props","updatePreview","React","Component","Editor","e","target","value","className","onChange","handleEditorChange","bind","Preview","dangerouslySetInnerHTML","__html","Container","dispatch","updatePreviewAction","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,6NCWrCC,G,YAAY,+qCAgDlBC,IAAOC,WAAW,CAChBC,QAAQ,IAIV,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAAUC,EAAMC,EAAOC,GACrC,MAAO,mCAA4BF,EAA5B,aAAqCE,GAAS,QAKvD,IAAMC,EAAWC,IACXC,EAAUD,IAGVE,EAAQC,KAad,WAAmE,IAArCC,EAAoC,uDAA5B,CAACN,KAAMT,GAAcgB,EAAO,uCAChE,OAAOA,EAAOC,MACZ,IAjBmB,iBAkBjB,MAAO,CACLR,KAAMO,EAAOP,MAEjB,QACE,OAAOM,M,IAqBPG,E,uKAGF,OACE,yBAAKC,GAAG,gBACN,kBAAC,EAAD,CAAQV,KAAMW,KAAKC,MAAMZ,KAAMa,cAAeF,KAAKC,MAAMC,gBACzD,kBAAC,EAAD,CAASb,KAAMW,KAAKC,MAAMZ,Y,GANLc,IAAMC,WAY7BC,E,iLAEeC,GACjBN,KAAKC,MAAMC,cAAcI,EAAEC,OAAOC,S,+BAIlC,OACE,yBAAKC,UAAU,UAAUV,GAAG,kBAC1B,yBAAKU,UAAU,SAASV,GAAG,iBAA3B,UAGA,8BAAUU,UAAU,YAAYV,GAAG,SAASS,MAAOR,KAAKC,MAAMZ,KAAMqB,SAAUV,KAAKW,mBAAmBC,KAAKZ,a,GAZ9FG,IAAMC,WAkBrBS,E,uKAGF,OACE,yBAAKJ,UAAU,UAAUV,GAAG,mBAC1B,yBAAKU,UAAU,SAASV,GAAG,kBAA3B,WAGA,yBAAKU,UAAU,YAAYV,GAAG,UAAUe,wBAAyB,CAACC,OAAQlC,IAAOmB,KAAKC,MAAMZ,KAAM,CAACL,SAAUA,Y,GAR/FmB,IAAMC,WActBY,EAAYxB,GA5DlB,SAAyBG,GACvB,MAAO,CACLN,KAAMM,EAAMN,SAIhB,SAA4B4B,GAC1B,MAAO,CACLf,cAAe,SAASb,GACtB4B,EA7BN,SAA6B5B,GAC3B,MAAO,CACLQ,KATmB,iBAUnBR,KAAMA,GA0BK6B,CAAoB7B,QAmDjBG,CAA6CM,GAYhDqB,MAVf,WACE,OACE,kBAAC7B,EAAD,CAAUG,MAAOA,GAAjB,IACE,kBAACuB,EAAD,QCzJcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dea22ebf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport * as ReactRedux  from 'react-redux';\nimport * as Redux from \"redux\";\nimport logo from './logo.svg';\nimport './App.css';\nimport marked from \"marked\";\n\n//import scss\nimport \"./presentational.scss\";\nimport \"./editorPreview.scss\";\n\nconst initialText=`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`\n\n//marked\nmarked.setOptions({\n  breaks: true,\n});\n\n// INSERTS target=\"_blank\" INTO HREF TAGS (required for codepen links)\nconst renderer = new marked.Renderer();\nrenderer.link = function (href, title, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\n}\n\n\n//redux\nconst Provider = ReactRedux.Provider;\nconst connect = ReactRedux.connect;\nconst UPDATE_PREVIEW = \"UPDATE_PREVIEW\";\n\nconst store = Redux.createStore(\n  updatePreviewReducer\n);\n\n//actions\nfunction updatePreviewAction(text){\n  return {\n    type: UPDATE_PREVIEW,\n    text: text\n  };\n}\n\n//reducers\nfunction updatePreviewReducer(state = {text: initialText}, action){\n  switch(action.type){\n    case UPDATE_PREVIEW:\n      return {\n        text: action.text\n      }\n    default:\n      return state;\n  }\n}\n\n//prepare connect\nfunction mapStateToProps(state){\n  return {\n    text: state.text\n  };\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {\n    updatePreview: function(text){\n      dispatch(updatePreviewAction(text))\n    }\n  };\n}\n\n\n//components\nclass Presentational extends React.Component{\n\n  render(){\n    return (\n      <div id=\"page-wrapper\">\n        <Editor text={this.props.text} updatePreview={this.props.updatePreview}/>\n        <Preview text={this.props.text}/>\n      </div>\n    );\n  }\n}\n\nclass Editor extends React.Component{\n\n  handleEditorChange(e){\n    this.props.updatePreview(e.target.value);\n  }\n\n  render(){\n    return (\n      <div className=\"wrapper\" id=\"editor-wrapper\">\n        <div className=\"header\" id=\"editor-header\">\n          Editor\n        </div>\n        <textarea className=\"text-pane\" id=\"editor\" value={this.props.text} onChange={this.handleEditorChange.bind(this)}/>\n      </div>\n    )\n  }\n}\n\nclass Preview extends React.Component{\n\n  render(){\n    return (\n      <div className=\"wrapper\" id=\"preview-wrapper\">\n        <div className=\"header\" id=\"preview-header\">\n          Preview\n        </div>\n        <div className=\"text-pane\" id=\"preview\" dangerouslySetInnerHTML={{__html: marked(this.props.text, {renderer: renderer})}}/>\n    </div>\n    )\n  }\n}\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Presentational);\n\nfunction App() {\n  return (\n    <Provider store={store}> {/*TODO: create and provide store */}\n      <Container/>\n    </Provider>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}